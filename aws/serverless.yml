# serverless.yml
service: freestyle-judge

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    DATA_TABLE: ${self:service}-${self:provider.stage}-dataTable
    DOMAIN_SUFFIX: freestyle-judge

  httpApi:
    payload: '2.0'
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DATA_TABLE}"

functions:
  importEventFromPoolCreator:
    handler: source/main.importEventFromPoolCreator
    events:
      - http:
          path: importEventFromPoolCreator/{eventKey}
          method: post
          cors: true
  importEventFromEventCreator:
    handler: source/main.importEventFromEventCreator
    events:
      - http:
          path: importEventFromEventCreator/{eventKey}
          method: post
          cors: true
  getEssentialDatabaseData:
    handler: source/main.getEssentialDatabaseData
    events:
      - http:
          path: getEssentialDatabaseData/{eventKey}
          method: get
          cors: true
  getEventData:
    handler: source/main.getEventData
    events:
      - http:
          path: getEventData/{eventKey}
          method: get
          cors: true
  getEventDataVersion:
    handler: source/main.getEventDataVersion
    events:
      - http:
          path: getEventDataVersion/{eventKey}
          method: get
          cors: true
  updateEventState:
    handler: source/main.updateEventState
    events:
      - http:
          path: updateEventState/{eventKey}
          method: post
          cors: true
  updateJudgeState:
    handler: source/main.updateJudgeState
    events:
      - http:
          path: updateJudgeState/{eventKey}/judgeKey/{judgeKey}
          method: post
          cors: true
  updateJudgeData:
    handler: source/main.updateJudgeData
    events:
      - http:
          path: updateJudgeData/{poolKey}/judgeKey/{judgeKey}/teamIndex/{teamIndex}
          method: post
          cors: true
  updatePoolData:
    handler: source/main.updatePoolData
    events:
      - http:
          path: updatePoolData/{poolKey}
          method: post
          cors: true
  getEventDirectory:
    handler: source/main.getEventDirectory
    events:
      - http:
          path: getEventDirectory
          method: get
          cors: true
  removeEventFromDirectory:
    handler: source/main.removeEventFromDirectory
    events:
      - httpApi:
          path: /removeEventFromDirectory/{eventKey}
          method: post
          authorizer: serviceAuthorizer
  getUserPermissions:
    handler: source/main.getUserPermissions
    events:
      - httpApi:
          path: /getUserPermissions
          method: get
          authorizer: serviceAuthorizer

resources:
  Resources:
    dataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DATA_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
    HttpApi:
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://www.freestylejudge.com
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: ${self:service}-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}

plugins:
  - fullstack-serverless

custom:
  fullstack:
    bucketName: deployed-bucket
    distributionFolder: ../client/builds/web
    indexDocument: index.html
